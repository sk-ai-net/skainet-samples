# SPDX-FileCopyrightText: 2024 Deutsche Telekom AG
#
# SPDX-License-Identifier: Apache-2.0

name: Publish

on:
  push:
    branches: ["main"]

env:
  REGISTRY_URL: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  REGISTRY_NAMESPACE: sk-ai-net
  MODULES: "SinusApproximator"    

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build KMP Project
        run: |
          modules=(${{ env.MODULES }})
          for module in "${modules[@]}"; do
          (
            echo "Building in $module"
            cd "$module" && ./gradlew :composeApp:wasmJsBrowserProductionWebpack
          ) &
          done

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        run: |
          modules=(${{ env.MODULES }})
          for module in "${modules[@]}"; do
            echo "Building module: $module"
            module_lc="${module,,}"

            version=$(grep '^version=' $module/gradle.properties | awk -F= '{print $2}')
            module_lc="${module,,}"
            docker build --build-arg VERSION=$version -f $module/Dockerfile -t ghcr.io/sk-ai-net/samples-$module_lc:$version $module
            docker push ghcr.io/sk-ai-net/samples-$module_lc:$version
          done

      - name: Build and publish WASM images for modules
        run: |
          modules=(${{ env.MODULES }})
          for module in "${modules[@]}"; do
            echo "Building module: $module"
            module_lc="${module,,}"
            echo "With safe name: $module_lc"


            # Extract module version from gradle.properties
            version=$(grep '^version=' "$module/gradle.properties" | awk -F= '{print $2}' | tr -d '[:space:]')
            echo "Detected version: $version"

            # Build wasm binary for the current module
            ./gradlew :$module:wasmJsBrowserProductionWebpack

            # Assume WASM binary is located at a standard path, adjust if necessary:
            WASM_PATH="$module/build/dist/wasmJs/productionExecutable/$module.wasm"
            if [ ! -f "$WASM_PATH" ]; then
              echo "WASM binary not found at $WASM_PATH"
              exit 1
            fi

            # Create temporary Dockerfile for WASM packaging
            cat <<EOF > Dockerfile.wasm
          FROM scratch
          COPY $module.wasm /app/$module.wasm
          EOF

            # Copy wasm binary to build context
            cp "$WASM_PATH" "./$module.wasm"



            # Build and push OCI image to GHCR
            docker buildx build \
              --platform=wasi/wasm32 \
              --tag ghcr.io/${{ github.repository }}/$module_lc-wasm:$version \
              --tag ghcr.io/${{ github.repository }}/$module_lc-wasm:latest \
              --push .

            # Cleanup temporary files
            rm Dockerfile.wasm "$module.wasm"

            echo "Successfully pushed ghcr.io/${{ github.repository }}/$module_lc-wasm:$version"
          done
